#ifndef HTTP_CONNECTION_H
#define HTTP_CONNECTION_H

#include<sys/epoll.h>
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<signal.h>
#include<sys/types.h>
#include<fcntl.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<sys/stat.h>
#include<sys/mman.h>
#include<stdarg.h>
#include<errno.h>
#include"locker.h"
#include<sys/uio.h>
#include<string.h>
class http_connection
{
    
public:

    static int m_epoll_fd; //  1 所有socket事件都被注册到同一个epoll对象中 static共享
    static int m_user_count ;  //2 统计用户数量

    static const int FILENAME_LEN = 200;        // 文件名的最大长度

    static const int READ_BUFFER_SIZE = 2048;   // 5 读缓冲区大小
    static const int WRITE_BUFFER_SIZE = 2048;  //6 写缓冲区大小
    bool read();    //非阻塞的读
    bool write();   //非阻塞的写


    /* 9 定义各种状态 */
    enum METHOD { GET = 0 ,POST , HEAD , PUT , DELETE , OPTION , CONNECT};

    /*
        解析客户端请求时，主状态机的状态
        CHECK_STATE_REQUESTLINE:当前正在分析请求行
        CHECK_STATE_HEADER:当前正在分析头部字段
        CHECK_STATE_CONTENT:当前正在解析请求体
    */
    enum CHECK_STATE{CHECK_STATE_REQUESTLINE = 0, CHECK_STATE_HEADER, CHECK_STATE_CONTENT };
    

    
    enum LINE_STATUS { LINE_OK = 0, LINE_BAD, LINE_OPEN };  //从状态机(即解析某一行的状态)的三种可能状态，即行的读取状态，分别表示1.读取到一个完整的行 2.行出错 3.行数据尚且不完整
    

    /*
        服务器处理HTTP请求的可能结果，报文解析的结果
        NO_REQUEST          :   请求不完整，需要继续读取客户数据
        GET_REQUEST         :   表示获得了一个完成的客户请求
        BAD_REQUEST         :   表示客户请求语法错误
        NO_RESOURCE         :   表示服务器没有资源
        FORBIDDEN_REQUEST   :   表示客户对资源没有足够的访问权限
        FILE_REQUEST        :   文件请求,获取文件成功
        INTERNAL_ERROR      :   表示服务器内部错误
        CLOSED_CONNECTION   :   表示客户端已经关闭连接了
    */
    enum HTTP_CODE{NO_REQUEST, GET_REQUEST, BAD_REQUEST, NO_RESOURCE, FORBIDDEN_REQUEST, FILE_REQUEST, INTERNAL_ERROR, CLOSED_CONNECTION};
    
    
    
public:

    http_connection(){} 
    ~http_connection(){}

    void process();   // 1 处理客户端请求 响应也是

    void setnonblocking(int fd); //设置文件描述符非阻塞

    void init(int sockfd , const sockaddr_in &addr);        //初始化新接收的连接

    void close_conection(); //关闭连接

    
    /* 9 下面这一组函数被process_read调用以分析HTTP请求 */
    HTTP_CODE process_read();   //解析HTTP请求 (主状态机)
    HTTP_CODE parse_request_line(char *text);   // (主状态机) - 解析请求首行
    HTTP_CODE parse_headers(char *text);   //(主状态机) - 解析请求头
    HTTP_CODE parse_content(char *text);   //(主状态机) - 解析请求体
    LINE_STATUS parse_line();   //从状态机解析一行函数  获取到了一行再根据状态交给 解析请求首行函数或头函数(以上3个)
    HTTP_CODE do_request();    


    /* 24 这一组函数被process_write调用以填充HTTP应答*/
    void unmap();
    bool add_response( const char* format, ... );
    bool add_content( const char* content );
    bool add_content_type();
    bool add_status_line( int status, const char* title );
    bool add_headers( int content_length );
    bool add_content_length( int content_length );
    bool add_linger();
    bool add_blank_line();
    bool process_write( HTTP_CODE ret );    // 填充HTTP应答

private:
    
    int m_sockfd ;      //3 该HTTP连接的socket
    sockaddr_in m_address;  // 4 通信的socket地址

    char m_read_buf[READ_BUFFER_SIZE];  // 7 读缓冲区
    int  m_read_index;                  // 8 标识读缓冲区中已经读入的客户端数据的最后一个字节的下一个位置

    int m_checked_index ;  //10 当前正在分析的字符在都读缓冲区的位置
    int m_start_line ; //11 当前正在解析行的起始位置
    CHECK_STATE m_check_state; //12 主状态机当前所处的状态,再定义一个init()初始化这三个成员
    void init();    //13 初始化连接其余的信息

    char * get_line(){return m_read_buf + m_start_line;}        //14  内联函数get_line()

    //请求首行的成员
    char *m_url; //16 请求目标文件的文件名    -每一个客户端任务对应的资源都是不一样的，因此设置为成员变量
    char *m_version;    //17 协议版本 只支持 HTTP1.1
    METHOD m_method;    //18 请求方法   - 在init()追加初始化这三个成员

    //请求头的成员
    char *m_host;   //19 主机名
    bool m_linger; //20 判断HTTP请求是否要保持连接 即： Connection: keep-alive
    int m_content_length;    // 21 HTTP请求的消息总长度
    
    //服务器资源
    char m_real_file[ FILENAME_LEN ];       // 22 客户请求的目标文件的完整路径，其内容等于 doc_root + m_url, doc_root是网站根目录
    char* m_file_address;                   // 23 客户请求的目标文件被mmap到内存中的起始位置
    char m_write_buf[ WRITE_BUFFER_SIZE ];  // 写缓冲区
    int m_write_idx;                        // 写缓冲区中待发送的字节数
    struct stat m_file_stat;                // 目标文件的状态。通过它我们可以判断文件是否存在、是否为目录、是否可读，并获取文件大小等信息
    struct iovec m_iv[2];                   // 我们将采用writev来执行写操作，所以定义下面两个成员，其中m_iv_count表示被写内存块的数量。
    int m_iv_count;

    int bytes_to_send;      //将要发送的字节数
    int bytes_have_send;    //已经发送的字节数
    

};



#endif